document.addEventListener('DOMContentLoaded', function() {
    // –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–∏–∑–Ω–µ—Å–∞
    const businessTypes = {
        shop: { multiplier: 1, name: '–û–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω' },
        service: { multiplier: 0.9, name: '–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è' },
        startup: { multiplier: 1.1, name: '–°—Ç–∞—Ä—Ç–∞–ø' }
    };

    // –ë–∞–∑–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã
    const complexityTypes = {
        basic: {
            price: 3000,
            duration: { min: 2, max: 3 }
        },
        standard: {
            price: 6000,
            duration: { min: 3, max: 5 }
        },
        premium: {
            price: 12000,
            duration: { min: 6, max: 8 }
        }
    };

    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    const urgencyMultipliers = {
        normal: { price: 1, time: 1 },
        urgent: { price: 1.3, time: 0.8 },
        very_urgent: { price: 1.5, time: 0.6 }
    };

    function calculatePrice() {
        const businessType = document.getElementById('productType').value;
        const complexity = document.getElementById('complexity').value;
        const urgency = document.getElementById('urgency').value;
        const additionalFeatures = document.querySelectorAll('input[name="additional"]:checked');

        // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
        let basePrice = complexityTypes[complexity].price;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
        basePrice *= businessTypes[businessType].multiplier;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        let additionalPrice = 0;
        let additionalTime = 0;

        additionalFeatures.forEach(feature => {
            const priceStr = feature.closest('.feature-option').querySelector('.feature-price').textContent;
            let price = parseInt(priceStr.match(/\d+/)[0]); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            additionalPrice += price;
            additionalTime += parseFloat(feature.dataset.time);
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∫ –æ–±—â–µ–π —Å—É–º–º–µ
        const finalPrice = (basePrice + additionalPrice) * urgencyMultipliers[urgency].price;

        // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
        const baseMinTime = complexityTypes[complexity].duration.min;
        const baseMaxTime = complexityTypes[complexity].duration.max;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        const totalMinTime = baseMinTime + additionalTime;
        const totalMaxTime = baseMaxTime + additionalTime;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–∏
        const finalMinTime = Math.ceil(totalMinTime / urgencyMultipliers[urgency].time);
        const finalMaxTime = Math.ceil(totalMaxTime / urgencyMultipliers[urgency].time);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        document.querySelector('.time-estimate .estimate-value').textContent = 
            `${finalMinTime}-${finalMaxTime} –Ω–µ–¥–µ–ª—å`;
        
        document.querySelector('.traditional-time .estimate-value').textContent = 
            `${finalMinTime * 4}-${finalMaxTime * 4} –Ω–µ–¥–µ–ª—å`;
        
        document.querySelector('.price-value').textContent = 
            `$${Math.round(finalPrice)}`;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
        updateBenefits(finalPrice);
    }

    function updateBenefits(price) {
        const traditionalPrice = price * 2.5;
        const savings = traditionalPrice - price;
        const savingsPercent = Math.round((savings / traditionalPrice) * 100);

        document.querySelector('.calculator-benefits').innerHTML = `
            <div class="benefit-item">
                <div class="benefit-icon">‚ö°</div>
                <div class="benefit-content">
                    <h4>–£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</h4>
                    <p>–í 5-10 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ —Å AI</p>
                </div>
            </div>
            <div class="benefit-item">
                <div class="benefit-icon">üí∞</div>
                <div class="benefit-content">
                    <h4>–≠–∫–æ–Ω–æ–º–∏—è –±—é–¥–∂–µ—Ç–∞</h4>
                    <p>–î–æ ${savingsPercent}% —ç–∫–æ–Ω–æ–º–∏–∏</p>
                </div>
            </div>
            <div class="benefit-item">
                <div class="benefit-icon">üéØ</div>
                <div class="benefit-content">
                    <h4>–¢–æ—á–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏</h4>
                    <p>90% —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤</p>
                </div>
            </div>
            <div class="benefit-item">
                <div class="benefit-icon">üîÑ</div>
                <div class="benefit-content">
                    <h4>–ì–∏–±–∫–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π</h4>
                    <p>–ë—ã—Å—Ç—Ä–æ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫</p>
                </div>
            </div>
        `;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('productType').addEventListener('change', calculatePrice);
    document.getElementById('complexity').addEventListener('change', calculatePrice);
    document.getElementById('urgency').addEventListener('change', calculatePrice);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
    document.querySelectorAll('input[name="additional"]').forEach(checkbox => {
        checkbox.addEventListener('change', calculatePrice);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–∞ –∫–µ–π—Å–æ–≤
    function initCasesSlider() {
        const wrapper = document.querySelector('.cases-wrapper');
        const slides = document.querySelectorAll('.case-card');
        const prevBtn = document.querySelector('.slider-prev');
        const nextBtn = document.querySelector('.slider-next');
        const dotsContainer = document.querySelector('.slider-dots');
        
        if (!wrapper || !slides.length) return;

        const SLIDE_DURATION = 10000; // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–ª–∞–π–¥
        let currentSlide = 0;
        let progressBar;
        
        // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        function createProgressBar() {
            progressBar = document.createElement('div');
            progressBar.classList.add('slider-progress');
            
            const progressBarInner = document.createElement('div');
            progressBarInner.classList.add('slider-progress-inner');
            
            progressBar.appendChild(progressBarInner);
            wrapper.parentElement.appendChild(progressBar);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        function updateProgress(reset = false) {
            const progressInner = progressBar.querySelector('.slider-progress-inner');
            progressInner.style.transition = reset ? 'none' : `width ${SLIDE_DURATION}ms linear`;
            progressInner.style.width = reset ? '0%' : '100%';
            
            if (reset) {
                // –§–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É
                progressInner.offsetHeight;
                progressInner.style.transition = `width ${SLIDE_DURATION}ms linear`;
                progressInner.style.width = '100%';
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–∞–π–¥ –∏ —Å–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        slides.forEach((slide, index) => {
            if (index === 0) {
                slide.style.opacity = '1';
                slide.classList.add('active');
            } else {
                slide.style.opacity = '0';
            }
        });
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        slides.forEach((_, index) => {
            const dot = document.createElement('div');
            dot.classList.add('slider-dot');
            if (index === 0) dot.classList.add('active');
            dot.addEventListener('click', () => goToSlide(index));
            dotsContainer.appendChild(dot);
        });
        
        function goToSlide(index) {
            slides[currentSlide].style.opacity = '0';
            slides[currentSlide].classList.remove('active');
            
            currentSlide = index;
            
            slides[currentSlide].style.opacity = '1';
            slides[currentSlide].classList.add('active');
            wrapper.style.transform = `translateX(-${currentSlide * 100}%)`;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
            document.querySelectorAll('.slider-dot').forEach((dot, idx) => {
                dot.classList.toggle('active', idx === currentSlide);
            });
            updateProgress(true);
        }
        
        function nextSlide() {
            goToSlide((currentSlide + 1) % slides.length);
        }
        
        function prevSlide() {
            goToSlide((currentSlide - 1 + slides.length) % slides.length);
        }
        
        prevBtn.addEventListener('click', prevSlide);
        nextBtn.addEventListener('click', nextSlide);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        createProgressBar();
        updateProgress(true);
        
        // –ê–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        let slideInterval = setInterval(() => {
            nextSlide();
        }, SLIDE_DURATION);
        
        // –ü–∞—É–∑–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        wrapper.addEventListener('mouseenter', () => {
            clearInterval(slideInterval);
            const progressInner = progressBar.querySelector('.slider-progress-inner');
            progressInner.style.animationPlayState = 'paused';
        });
        
        wrapper.addEventListener('mouseleave', () => {
            updateProgress(true);
            slideInterval = setInterval(() => {
                nextSlide();
            }, SLIDE_DURATION);
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ —Å–ª–∞–π–¥–µ—Ä
    calculatePrice();
    initCasesSlider();

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
    function initAdvantageCards() {
        const cards = document.querySelectorAll('.advantage-card');
        
        cards.forEach(card => {
            const detailsBtn = card.querySelector('.details-btn');
            const hiddenContent = card.querySelector('.hidden-content');
            
            if (detailsBtn && hiddenContent) {
                detailsBtn.addEventListener('click', () => {
                    const isActive = card.classList.contains('active');
                    
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                    cards.forEach(c => {
                        c.classList.remove('active');
                        const btn = c.querySelector('.details-btn');
                        if (btn) btn.textContent = '–ü–æ–¥—Ä–æ–±–Ω–µ–µ';
                        const content = c.querySelector('.hidden-content');
                        if (content) content.style.maxHeight = '0px';
                    });
                    
                    // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ—ë
                    if (!isActive) {
                        card.classList.add('active');
                        detailsBtn.textContent = '–°–≤–µ—Ä–Ω—É—Ç—å';
                        hiddenContent.style.maxHeight = `${hiddenContent.scrollHeight}px`;
                    }
                });
            }
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π DOMContentLoaded
    initAdvantageCards();

    function initCaseMediaSlider() {
        const mediaSliders = document.querySelectorAll('.case-media-slider');
        
        mediaSliders.forEach(slider => {
            const slides = slider.querySelectorAll('.case-slide');
            const dots = slider.querySelectorAll('.case-media-dot');
            let currentSlide = 0;
            
            function showSlide(index) {
                slides.forEach(slide => slide.classList.remove('active'));
                dots.forEach(dot => dot.classList.remove('active'));
                
                slides[index].classList.add('active');
                dots[index].classList.add('active');
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–æ—á–µ–∫
            dots.forEach((dot, index) => {
                dot.addEventListener('click', () => {
                    currentSlide = index;
                    showSlide(currentSlide);
                });
            });
            
            // –ê–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
            setInterval(() => {
                currentSlide = (currentSlide + 1) % slides.length;
                showSlide(currentSlide);
            }, 3000);
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π DOMContentLoaded
    initCaseMediaSlider();

    document.querySelectorAll('.details-toggle').forEach(button => {
        button.addEventListener('click', () => {
            const details = button.closest('.example-preview').querySelector('.example-details');
            details.classList.toggle('active');
            button.textContent = details.classList.contains('active') ? '—Å–∫—Ä—ã—Ç—å' : '–ø–æ–¥—Ä–æ–±–Ω–µ–µ';
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    const contactForm = document.querySelector('.contact-form');
    if (contactForm) {
        console.log('Form found:', contactForm); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç –ª–∏ —Ñ–æ—Ä–º—É

        contactForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            console.log('Form submitted'); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ
            
            // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
            const productType = document.getElementById('productType')?.value;
            const telegram = document.querySelector('input[name="telegram"]')?.value;
            const email = document.querySelector('input[name="email"]')?.value;
            const phone = document.querySelector('input[name="phone"]')?.value;
            const message = document.querySelector('textarea[name="message"]')?.value;

            console.log('Form data:', { productType, telegram, email, phone, message }); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã
            const formData = {
                productType,
                telegram,
                email,
                phone,
                message,
                source: 'landing_form',
                timestamp: new Date().toISOString()
            };

            try {
                console.log('Sending data:', formData);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –Ω–∞ –æ–±–∞ –≤–µ–±—Ö—É–∫–∞ —Å —Ä–µ–∂–∏–º–æ–º no-cors
                const responses = await Promise.all([
                    fetch('http://n8n2.supashkola.ru/webhook/tgappsdev', {
                        method: 'POST',
                        mode: 'no-cors',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData)
                    }),
                    fetch('https://webhook.site/69fadba3-8cda-4c6f-92de-8b3a0c8cb35c', {
                        method: 'POST',
                        mode: 'no-cors',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData)
                    })
                ]);

                console.log('Responses:', responses);

                // –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ mode: 'no-cors' –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å response.ok
                // –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º —Å–∞–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
                contactForm.reset();
                showNotification('–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');

            } catch (error) {
                console.error('Error:', error);
                showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
            }
        });
    } else {
        console.error('Contact form not found'); // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function showNotification(message, type = 'success') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification.style.position = 'fixed';
        notification.style.top = '20px';
        notification.style.right = '20px';
        notification.style.padding = '15px 25px';
        notification.style.borderRadius = '12px';
        notification.style.zIndex = '1000';
        notification.style.animation = 'slideIn 0.3s ease';
        
        if (type === 'success') {
            notification.style.background = 'rgba(76, 175, 80, 0.9)';
        } else {
            notification.style.background = 'rgba(244, 67, 54, 0.9)';
        }
        
        document.body.appendChild(notification);

        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, 5000);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É
    const submitButton = document.querySelector('.contact-form button[type="submit"]');
    if (submitButton) {
        submitButton.addEventListener('click', function(e) {
            e.preventDefault();
            const form = this.closest('.contact-form');
            if (form) {
                // –°–æ–∑–¥–∞–µ–º –∏ –¥–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ submit
                const submitEvent = new Event('submit', {
                    bubbles: true,
                    cancelable: true
                });
                form.dispatchEvent(submitEvent);
            }
        });
    }
}); 